# This file describes a programming task which we'd like you to complete
# in the language of your choice, then send back to Fauna for evaluation.
#
# Problem: Task execution ordering. Imagine a system of related tasks where
# some tasks depend on others to complete before they can start. Some tasks
# will have no dependencies and can start right away, and others will need
# to wait for one or more tasks to complete.
#
# These dependency relationships are defined in a text stream with lines
# starting with a task identifier (1-20 case sensitive roman alphabet
# characters [a-zA-Z]), followed by a ':', followed by a comma delimited list
# of dependencies (task identifiers). For example, if T depends on A and B,
# you'll have the line:
#
# T:A,B
#
# In the text input stream, any line which starts with '#' should be ignored.
# Any line  which is empty should be ignored as well. All lines which are not
# ignored must match the format described above. These lines will appear in
# groupings in the input stream, and each group will be separated by ignorable
# lines.
#
# This file is valid input, and contains four examples of task groups. See
# below.
#
# Your challenge is to write a program which reads standard input, and for each
# group of tasks in the input stream, writes a single line to standard output
# which states the order in which the tasks may be executed. The tasks should
# be printed with a single space between each task identified. Note that there
# may be multiple valid answers for each group. See examples below. Please
# note that there should be no additional output than is described here. We
# will be testing your code with automated tooling, and additional output
# will not help us evaluate the correctness of your program's behavior.
#
# Handle invalid input gracefully. Invalid input includes both badly formatted
# text or impossible task dependencies. If your program encounters invalid
# input, your program should emit no information on standard out, emit a
# message describing the problem on standard error, and exit with an exit
# status code of 1.
#
# Please produce code which demonstrates your best effort, complete with
# testing, comments, and so forth.
#
# You have 24 hours to send your solution back to Fauna from the time you
# are given the challenge.
#
# Good Luck!!

# EXAMPLE 1
#   T      Task T depends on A and B
#  / \
# A   B    Tasks A and B depend on no other tasks and can start right away.

T:A,B
A:
B:

# There are two valid outputs for EXAMPLE 1. One of the following would be
# written to standard out from your program (without '#' or quotes):
# "A B T"
# "B A T"

# EXAMPLE 2
#    T     Task T depends on A and B individually to complete
#   / \
#  A   B   A and B each depend on C to complete first.
#   \ /
#    C     C depends on D to complete first.
#    |
#    D     D depends on no tasks to complete, and can start right away.

T:A,B
A:C
B:C
C:D
D:

# One valid output of EXAMPLE 2 (without quotes): "D C A B T"
# The only other valid output of EXAMPLE 2: "D C B A T"

# EXAMPLE 3
#
#       T -      Task T depends on A, B and C individually to complete
#      / \  \
#     A   B  C   A depends on D, E and F. B depend on D. C depend on F.
#    /|\ /  /
#   | | D  /     D depends on F to complete first.
#   |  \|/
#   E   F        E and F depend on no tasks, and can start right away
#
# Note that A's dependency on F is redundant, but is listed in the input data:

T:A,B,C
B:D
C:F
D:F
A:D,E,F
E:
F:

# One valid output of EXAMPLE 3: "F C E D B A T"
# There are multiple other results which are legal (33 in total).


# EXAMPLE 4:
Release:LoadTest,FunctionalTest,VirusScan
LoadTest:Build
FunctionalTest:Build
VirusScan:Build
Build:

# One possible outcome for EXAMPLE 4 would be:
# Build VirusScan LoadTest FunctionalTest Release

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const readline_1 = require("readline");
class Tree {
    constructor() {
        this.cache = new Map();
        this.scheduled = new Map();
    }
    createNode(name, parent = undefined, children = new Array()) {
        return {
            name: name,
            parent: parent,
            children: children
        };
    }
    helper(node) {
        if (this.scheduled.has(node.name)) {
            return;
        }
        if (node.children.length > 0) {
            for (let child of node.children) {
                this.helper(child);
            }
        }
        if (!this.scheduled.has(node.name)) {
            this.scheduled.set(node.name, true);
        }
    }
    /*
        it works, i might want to spend some time optimizing
        both of these function the data structure itself i think would
        be prone to breaking down on the right edge case,
        going for quick and dirty a bit here.
    */
    addTask(name, deps) {
        if (!this.cache.has(name)) {
            this.cache.set(name, this.createNode(name));
        }
        let parent = this.cache.get(name);
        for (let dep of deps) {
            let childName = dep.trim().replace(' ', '');
            let child = this.cache.has(childName) ? this.cache.get(childName) : this.createNode(childName, parent);
            if (child != undefined) {
                this.cache.set(childName, child);
                parent === null || parent === void 0 ? void 0 : parent.children.push(child);
            }
        }
    }
    compute() {
        for (let key of this.cache.keys()) {
            const node = this.cache.get(key);
            if (node !== undefined) {
                this.helper(node);
            }
        }
        let order = '';
        for (let key of this.scheduled.keys()) {
            order += key + ' ';
        }
        return order;
    }
    /*
        hate this validation function, probably wouldnt use regex at all in production and instead go for a tokenization
        but also do it all in one step may down below in the 'main' function. But wanted to show i at least thought about it
        
    */
    correctFormat(str) {
        if (str.includes(':')) {
            let split = str.split(':');
            if (RegExp(/^\p{L}/, 'u').test(split[0])) {
                return true;
            }
            return false;
        }
        return false;
    }
    isEmpty() {
        return (this.cache.size === 0);
    }
}
async function main() {
    const rl = (0, readline_1.createInterface)({
        input: process.stdin,
        //output: process.stdout
    });
    let tree = new Tree();
    for await (const line of rl) {
        if (line.trim()[0] === '#' || line.length === 0) {
            if (!tree.isEmpty()) {
                console.log(tree.compute());
                tree = new Tree();
            }
            continue;
        }
        if (!tree.correctFormat(line)) {
            throw new Error(`Line is incorrect format: ${line}`);
        }
        const task = line.trim().split(':');
        tree.addTask(task[0], task[1].length > 0 ? task[1].split(',') : new Array());
    }
    console.log(tree.compute());
}
main().then(() => process.exit(0)).catch(e => {
    console.error(e);
    process.exit(1);
});
//# sourceMappingURL=data:application/json;base64,