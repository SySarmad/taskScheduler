"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const readline_1 = require("readline");
class Tree {
    constructor() {
        this.cache = new Map();
        this.scheduled = new Map();
    }
    addTask(name, deps) {
        if (!this.cache.has(name)) {
            this.cache.set(name, this.createNode(name));
        }
        let parent = this.cache.get(name);
        for (let dep of deps) {
            let childName = dep.trim().replace(' ', '');
            let child = this.cache.has(childName) ? this.cache.get(childName) : this.createNode(childName, parent);
            if (child != undefined) {
                this.cache.set(childName, child);
                parent === null || parent === void 0 ? void 0 : parent.children.push(child);
            }
        }
    }
    compute() {
        for (let key of this.cache.keys()) {
            const node = this.cache.get(key);
            if (node !== undefined) {
                this.helper(node);
            }
        }
        let order = '';
        for (let key of this.scheduled.keys()) {
            order += key + ' ';
        }
        return order;
    }
    correctFormat(str) {
        if (str.includes(':')) {
            let split = str.split(':');
            if (RegExp(/^\p{L}/, 'u').test(split[0])) {
                return true;
            }
            return false;
        }
        return false;
    }
    isEmpty() {
        return (this.cache.size === 0);
    }
    createNode(name, parent = undefined, children = new Array()) {
        return {
            name: name,
            parent: parent,
            children: children
        };
    }
    helper(node) {
        if (this.scheduled.has(node.name)) {
            return;
        }
        if (node.children.length > 0) {
            for (let child of node.children) {
                this.helper(child);
            }
        }
        if (!this.scheduled.has(node.name)) {
            this.scheduled.set(node.name, true);
        }
    }
}
async function main() {
    const rl = (0, readline_1.createInterface)({
        input: process.stdin,
        //output: process.stdout
    });
    let tree = new Tree();
    for await (const line of rl) {
        if (line.trim()[0] === '#' || line.length === 0) {
            if (!tree.isEmpty()) {
                console.log(tree.compute());
                tree = new Tree();
            }
            continue;
        }
        if (!tree.correctFormat(line)) {
            throw new Error(`Line is incorrect format: ${line}`);
        }
        const task = line.trim().split(':');
        tree.addTask(task[0], task[1].length > 0 ? task[1].split(',') : new Array());
    }
    console.log(tree.compute());
}
main().then(() => process.exit(0)).catch(e => {
    console.error(e);
    process.exit(1);
});
//# sourceMappingURL=data:application/json;base64,